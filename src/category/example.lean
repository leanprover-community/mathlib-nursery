
import category.comonad
import category_theory.category
import category_theory.monoid
import data.stream
import data.stream.basic
import tactic

universes u v

inductive slift (p : Prop) : Sort.{u}
| up (down : p) : slift

namespace stream

variables {Œ± : Type u} {Œ≤ : Type v}

def tails' (s : stream Œ±) : stream (stream Œ±)
| i := s.drop i
-- corec id tail (tail s)

theorem nth_tails' : ‚àÄ (n : nat) (s : stream Œ±), nth n (tails' s) = drop n s :=
begin
  intros, refl
end

attribute [extensionality] stream.ext

theorem drop_tails' : ‚àÄ (n : nat) (s : stream Œ±), drop n (tails' s) = tails' (drop n s) :=
begin
  intros, ext,
  simp [nth_tails',nth_drop],
end

lemma head_drop (s : stream Œ±) (n : ‚Ñï) : head (s.drop n) = s.nth n :=
by simp [head,drop,nth]

lemma drop_zero {Œ±} (x : stream Œ±) : drop 0 x = x := rfl

end stream

namespace category_theory

def pTime := Type.{u}
abbreviation Time := pTime.{0}

instance Time.category : category Time :=
{ hom := Œª Œ± Œ≤, stream Œ± ‚Üí stream Œ≤,
  id := Œª Œ±, @id (stream Œ±),
  comp := Œª Œ± Œ≤ Œ≥ f g, g ‚àò f }

def TVar (Œ± : Time) := (punit : Time) ‚ü∂ Œ±

def Henceforth : Time ‚•§ Time :=
{ obj := Œª Œ±, stream Œ±,
  map := Œª X Y f, stream.map f }
open Monoidal
-- #check @Monoidal.I (Time ‚•§ Time) _ _
-- #reduce Monoidal.I (Time ‚•§ Time)
-- #reduce Henceforth ‚ü∂ I (Time ‚•§ Time)

local attribute [simp] stream.nth_map stream.nth_tails' stream.drop_tails' stream.map_id stream.head_drop
instance Time.comonad : Comonad Time Henceforth :=
{ unit := { app := Œª X s, stream.head s },
  op := { app := Œª X s, stream.tails' s },
  right_id := by { refl },
  left_id := by { dsimp [functor.tensor_prod,category_theory.Monoidal.prod_map,left_id,left_id',Henceforth,(‚äü),(‚â´)],
                  unfold_projs, simp! [left_id',(‚àò),functor.tensor_prod],
                  unfold_projs, ext : 3, simp,    },
  assoc := by { dsimp [(‚â´),(‚äü),(‚àò),category_theory.Monoidal.prod_map,prod',functor.tensor_prod,category_theory.Monoidal.prod,assoc,Henceforth],
                unfold_projs,
                congr, ext X s : 3, simp [(‚ãô),functor.tensor_prod],
                erw [iso.refl_hom], dsimp [(‚ãô),(ùüô)],
                unfold_projs, simp, } }

def pair {Œ± Œ≤} (x : TVar Œ±) (y : TVar Œ≤) : TVar (Œ± √ó Œ≤) :=
(left_id (I Type)).inv ‚â´ (x ‚äó y)

infixr ` [‚äó] `:11 := pair



end category_theory

instance : comonad stream.{u} :=
{ map := @stream.map,
  extract := Œª Œ± x, x.nth 0,
  extend := Œª Œ± Œ≤ f x, x.tails'.map f,
  -- eq := Œª Œ± x y i, slift (x.nth i = y.nth i)
}

open stream

instance : is_lawful_comonad stream.{u} :=
begin
  refine { .. }; introv,
  repeat { ext, refl <|> dsimp [comonad.extend,comonad.extract] },
  { simp [nth_map,nth_tails',nth_drop] },
  { simp [nth_map,nth_tails',nth_drop,comonad.extend,comonad.extract,drop_zero], },
  { simp [nth_map,nth_tails',nth_drop,drop_map,drop_tails'], },
  { simp [(<$>),nth_drop,nth_map,nth_tails'], },
end

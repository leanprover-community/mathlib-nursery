
import category_theory.category
import category_theory.products
import category_theory.opposites
import category_theory.functor_class

universes u v

namespace category_theory
open function (uncurry)

variables (C : Type u) [ùíû : category.{u v} C]
include ùíû

class has_product :=
(prod' : C ‚Üí C ‚Üí C)
(infix ` ‚äó `:30 := prod')
[prod_functor : is_functor.{v v} (uncurry prod')]
(elim_left : Œ† {x} (y), x ‚äó y ‚ü∂ x)
(elim_right : Œ† (x) {y}, x ‚äó y ‚ü∂ y)
(intro : Œ† {x y a : C}, (a ‚ü∂ x) ‚Üí (a ‚ü∂ y) ‚Üí (a ‚ü∂ x ‚äó y))
(intro_elim_left : Œ† {x y a : C} (f : a ‚ü∂ x) (g : a ‚ü∂ y), intro f g ‚â´ elim_left _ = f)
(intro_elim_right : Œ† {x y a : C} (f : a ‚ü∂ x) (g : a ‚ü∂ y), intro f g ‚â´ elim_right _ = g)

infix ` ‚äó `:30 := has_product.prod'

instance prod_functor [has_product.{u v} C] : is_functor.{v v} (uncurry has_product.prod'.{u v} : C √ó C ‚Üí C) :=
has_product.prod_functor C

def product [has_product.{u v} C] : (C √ó C) ‚•§ C :=
is_functor.bundled.{v v} (uncurry has_product.prod'.{u v} : C √ó C ‚Üí C)

class has_coproduct :=
(coprod' : C ‚Üí C ‚Üí C)
(infix ` ‚®ø `:30 := coprod')
[coprod_functor : is_functor.{v v} (uncurry coprod')]
(intro_left : Œ† {x} (y), (x ‚ü∂ x ‚®ø y))
(intro_right : Œ† (x) {y}, (y ‚ü∂ x ‚®ø y))
(elim : Œ† {x y a : C}, (x ‚ü∂ a) ‚Üí (y ‚ü∂ a) ‚Üí (x ‚®ø y ‚ü∂ a))
(intro_left_elim : Œ† {x y a : C} (f : x ‚ü∂ a) (g : y ‚ü∂ a), intro_left y ‚â´ elim f g = f)
(intro_right_elim : Œ† {x y a : C} (f : x ‚ü∂ a) (g : y ‚ü∂ a), intro_right x ‚â´ elim f g = g)

infix ` ‚®ø `:30 := has_coproduct.coprod'

instance coprod_functor [has_coproduct.{u v} C] : is_functor.{v v} (uncurry has_coproduct.coprod'.{u v} : C √ó C ‚Üí C) :=
has_coproduct.coprod_functor C

def coproduct [has_coproduct.{u v} C] : (C √ó C) ‚•§ C :=
is_functor.bundled.{v v} (uncurry has_coproduct.coprod'.{u v} : C √ó C ‚Üí C)

open has_coproduct is_functor
instance [has_coproduct.{u v} C] : has_product.{u v} (C·µí·µñ) :=
{ prod' := (coprod'.{u v} : C ‚Üí C ‚Üí C),
  prod_functor := functor.is_functor (functor.op (coproduct C)),
  elim_left := Œª x, intro_left,
  elim_right := Œª x y, intro_right x,
  intro := Œª x y a f g, elim f g,
  intro_elim_left := Œª x y a f g, intro_left_elim f g,
  intro_elim_right := Œª x y a f g, intro_right_elim f g }

open has_product

instance [has_product.{u v} C] : has_coproduct.{u v} (C·µí·µñ) :=
{ coprod' := (prod'.{u v} : C ‚Üí C ‚Üí C),
  coprod_functor := functor.is_functor (functor.op (product C)),
  intro_left := Œª x, elim_left,
  intro_right := Œª x y, elim_right x,
  elim := Œª x y a f g, intro f g,
  intro_left_elim := Œª x y a f g, intro_elim_left f g,
  intro_right_elim := Œª x y a f g, intro_elim_right f g }

end category_theory
